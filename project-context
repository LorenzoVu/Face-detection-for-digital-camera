Title: Face Detection System for a Compact Digital Camera

Project Context:
This project is developed for ProCam S.p.A., a company preparing to launch a new compact digital camera aimed at young photography enthusiasts. The system is intended to facilitate selfie-taking by automatically detecting faces in the frame and returning the coordinates of the bounding boxes surrounding the detected faces.

Objective:
To build a face detection pipeline from scratch (without pre-trained models), using only Scikit-learn. The system must:
- Accept an input image
- Return a list of bounding boxes where faces are detected
- Return an empty list if no faces are present

Constraints:
- Pre-trained models (e.g., OpenCV Haar cascades, deep learning models) are not allowed
- Only classic machine learning models trainable from scratch using Scikit-learn
- Limited computational resources (the model must be lightweight and fast)
- No dataset is provided: you must find and preprocess a suitable dataset
- The solution must be well-documented, with justification for all technical choices

Dataset:
The selected dataset is **WIDER FACE**, accessed via **Deeplake**.
- Includes `train`, `validation`, and `test` splits (~32,000 images, ~393,000 faces)
- Bounding boxes are provided for each image (no manual parsing needed)
- Each image will be converted into fixed-size patches (`64x64` pixels):
  - **Positive samples**: cropped face regions
  - **Negative samples**: random background regions with no faces

Technical Pipeline:

1. **Dataset Construction**:
   - Load the dataset via Deeplake
   - Automatically extract `64x64` patches:
     - Positive: from face bounding boxes
     - Negative: random regions that do not overlap faces
   - Build `X_train`, `y_train`, `X_val`, `y_val` as NumPy arrays

2. **Feature Extraction**:
   - Use classic handcrafted feature extractors:
     - HOG (Histogram of Oriented Gradients)
     - LBP (Local Binary Patterns)
     - Optionally: combine HOG + LBP
     - Optional: PCA for dimensionality reduction
   - These features will be used as input for Scikit-learn classifiers

3. **Model Training**:
   - Candidate classifiers:
     - SVM (linear or RBF)
     - Random Forest
     - SGDClassifier
   - The model performs binary classification: face vs. non-face
   - Evaluate with cross-validation, accuracy, F1-score

4. **Image-Wide Detection**:
   - Apply sliding window across the full image
   - Use multiscale analysis (rescale image and repeat detection)
   - Classify each window; if predicted as a face, save bounding box

5. **Post-processing**:
   - Apply Non-Maximum Suppression (NMS) to remove overlapping boxes
   - Return the final list of face bounding boxes

6. **Validation and Testing**:
   - Test the system on new images (with and without faces)
   - Evaluate using metrics: precision, recall, F1-score, IoU
   - Visualize bounding boxes overlaid on images

Technical Notes:
- All images will be converted to grayscale and resized to `64x64`
- HOG features via `skimage.feature.hog`
- LBP features via `skimage.feature.local_binary_pattern`
- All models are implemented with Scikit-learn
- The final model should be exportable (e.g., with `joblib`)

Cited Sources:
- Dalal & Triggs (2005) – HOG
- Ojala et al. (1996) – LBP
- Viola & Jones (2001) – Haar-like features
- Cortes & Vapnik (1995) – SVM
- Breiman (2001) – Random Forest
- Deeplake dataset loading – https://activeloop.ai/docs/datasets/wider-face/

Next Steps:
- Extract face and non-face patches from WIDER FACE via Deeplake
- Implement `extract_features(img)` function (HOG + optional LBP)
- Train the classifier
- Build full detection pipeline with sliding window + NMS
